# üõ°Ô∏è Web Security Report

**Author:** Zain Shabaan  
**Date:**  7 September 2025  
**Topic:** Cross-Site Scripting (XSS)  
**Purpose:** To document and explain the XSS vulnerability, how it works, and how to prevent it.  

---

## üìñ Description
Cross-Site Scripting (XSS) is a web security vulnerability that allows attackers to inject malicious Javascript into web
pages viewed by other users, it expolits the trust between a users browser and a legitimiate website

Cross-Site Scripting (XSS)

1. Definition - Cross-Site Scripting (XSS) is a web security that allows an attacker to inject malicious scripts, usually Javascript
into web pages viewed by other users. When the vulnerable application fails to properly validate or escape user input,
the malicious script runs in the victims browser as it came from the trusted website.

2. How XSS Works
- Web applications often accept input (like comments, search terms, form data) and display it back to other users.

 -If input is not sanitized, an attacker can inject JavaScript code instead of plain text.

 -The victim‚Äôs browser executes the code, giving the attacker control over the user‚Äôs interaction with the site.
 Exanple:
 input (in a comment field);
 <script>alert('Hacked!');</script>
When displayed on the page, the victim sees a popup alert. In real attacks, the script could steal cookies, log keystrokes,
or direct users 

3. Types of XSS
a) Stored (Persistent) XSS

Malicious script is permanently stored on the target server (e.g., in a database).

Example: Attacker posts a malicious script in a blog comment; every visitor to the page gets infected.

Danger level: High.

b) Reflected (Non-Persistent) XSS

Malicious script comes from the current request (e.g., in a URL or form submission).

Example: Victim clicks a malicious link:

http://example.com/search?q=<script>alert('xss')</script>


The page reflects the query parameter back without sanitization, executing the script.

Danger level: Medium.

c) DOM-Based XSS

The vulnerability is in client-side JavaScript code, not server-side.

Example: A script in the page directly writes user input into the DOM without sanitization:

document.body.innerHTML = location.hash.substring(1);


If the attacker sets the URL to:

http://example.com/#<script>alert('DOM XSS')</script>


the malicious script runs in the victim‚Äôs browser.

Danger level: Medium to High.

4. Potential Impacts of XSS

 -Cookie Theft: Steal session cookies to impersonate users.

 -Keylogging: Capture keystrokes (passwords, credit cards).

 -Phishing: Redirect users to fake login pages.

 -Defacement: Alter the content of the page.

 -Worms: Spread automatically through social platforms (e.g., MySpace Samy worm).

 5. Real-World Examples

 MySpace Samy Worm (2005): A user injected JavaScript that auto-added him as a friend. Within 20 hours, over 1 million users were affected.

Yahoo Mail (2013): Attackers exploited an XSS vulnerability to steal cookies and hijack email accounts.

6. Prevention Techniques

 -Input Validation & Sanitization

 -Reject or sanitize suspicious input (<, >, ", ', /).

 -Use whitelisting for expected inputs.

 -Output Encoding

 -Encode output before rendering in HTML (e.g., &lt; for <).

 -Content Security Policy (CSP)

 -Restrict what scripts can run on the site.

 -HttpOnly Cookies

 -Mark cookies as HttpOnly to prevent JavaScript access.

 -Framework Protections

 -Use secure libraries/frameworks (e.g., React automatically escapes output).

 7. Example: Vulnerable vs. Secure Code

 Vulnerable PHP code:

<?php
echo "Hello " . $_GET["name"];
?>


URL input:

http://example.com/?name=<script>alert('XSS')</script>


Result: Executes JavaScript.

Secure PHP code:

<?php
echo "Hello " . htmlspecialchars($_GET["name"], ENT_QUOTES, 'UTF-8');
?>


Input is escaped ‚Üí no script execution.

8. Summary

 -XSS = Injecting malicious scripts into web pages.

 -Types: Stored, Reflected, DOM-based.

 -Risks: Data theft, impersonation, phishing, worms.

 -Prevention: Sanitize input, encode output, enforce CSP, use secure frameworks.
